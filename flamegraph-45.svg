<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="25890"><g><title>advent2021`__rdl_dealloc (16 samples, 0.06%)</title><rect x="0.0116%" y="229" width="0.0618%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="16"/><text x="0.2616%" y="239.50"></text></g><g><title>advent2021`&lt;advent2021::day23::State as core::hash::Hash&gt;::hash (9 samples, 0.03%)</title><rect x="2.5415%" y="213" width="0.0348%" height="15" fill="rgb(217,0,24)" fg:x="658" fg:w="9"/><text x="2.7915%" y="223.50"></text></g><g><title>advent2021`advent2021::day23::State::at_destination (6 samples, 0.02%)</title><rect x="3.8161%" y="181" width="0.0232%" height="15" fill="rgb(221,193,54)" fg:x="988" fg:w="6"/><text x="4.0661%" y="191.50"></text></g><g><title>advent2021`advent2021::day23::State::new_state (5 samples, 0.02%)</title><rect x="3.8393%" y="181" width="0.0193%" height="15" fill="rgb(248,212,6)" fg:x="994" fg:w="5"/><text x="4.0893%" y="191.50"></text></g><g><title>advent2021`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.03%)</title><rect x="3.8586%" y="181" width="0.0270%" height="15" fill="rgb(208,68,35)" fg:x="999" fg:w="7"/><text x="4.1086%" y="191.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.17%)</title><rect x="6.0718%" y="165" width="0.1738%" height="15" fill="rgb(232,128,0)" fg:x="1572" fg:w="45"/><text x="6.3218%" y="175.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="6.9757%" y="149" width="0.0154%" height="15" fill="rgb(207,160,47)" fg:x="1806" fg:w="4"/><text x="7.2257%" y="159.50"></text></g><g><title>advent2021`advent2021::day23::State::at_destination (122 samples, 0.47%)</title><rect x="6.9911%" y="149" width="0.4712%" height="15" fill="rgb(228,23,34)" fg:x="1810" fg:w="122"/><text x="7.2411%" y="159.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (82 samples, 0.32%)</title><rect x="7.1456%" y="133" width="0.3167%" height="15" fill="rgb(218,30,26)" fg:x="1850" fg:w="82"/><text x="7.3956%" y="143.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (27 samples, 0.10%)</title><rect x="7.3581%" y="117" width="0.1043%" height="15" fill="rgb(220,122,19)" fg:x="1905" fg:w="27"/><text x="7.6081%" y="127.50"></text></g><g><title>advent2021`advent2021::day23::State::at_destination (574 samples, 2.22%)</title><rect x="6.2457%" y="165" width="2.2171%" height="15" fill="rgb(250,228,42)" fg:x="1617" fg:w="574"/><text x="6.4957%" y="175.50">a..</text></g><g><title>advent2021`hashbrown::map::make_hash (259 samples, 1.00%)</title><rect x="7.4623%" y="149" width="1.0004%" height="15" fill="rgb(240,193,28)" fg:x="1932" fg:w="259"/><text x="7.7123%" y="159.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (77 samples, 0.30%)</title><rect x="8.1653%" y="133" width="0.2974%" height="15" fill="rgb(216,20,37)" fg:x="2114" fg:w="77"/><text x="8.4153%" y="143.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.12%)</title><rect x="9.3936%" y="149" width="0.1197%" height="15" fill="rgb(206,188,39)" fg:x="2432" fg:w="31"/><text x="9.6436%" y="159.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (370 samples, 1.43%)</title><rect x="12.8080%" y="133" width="1.4291%" height="15" fill="rgb(217,207,13)" fg:x="3316" fg:w="370"/><text x="13.0580%" y="143.50"></text></g><g><title>advent2021`DYLD-STUB$$memset (10 samples, 0.04%)</title><rect x="16.5701%" y="117" width="0.0386%" height="15" fill="rgb(231,73,38)" fg:x="4290" fg:w="10"/><text x="16.8201%" y="127.50"></text></g><g><title>advent2021`__rdl_alloc (18 samples, 0.07%)</title><rect x="16.6087%" y="117" width="0.0695%" height="15" fill="rgb(225,20,46)" fg:x="4300" fg:w="18"/><text x="16.8587%" y="127.50"></text></g><g><title>advent2021`__rdl_dealloc (11 samples, 0.04%)</title><rect x="16.6783%" y="117" width="0.0425%" height="15" fill="rgb(210,31,41)" fg:x="4318" fg:w="11"/><text x="16.9283%" y="127.50"></text></g><g><title>advent2021`__rust_alloc (8 samples, 0.03%)</title><rect x="16.7207%" y="117" width="0.0309%" height="15" fill="rgb(221,200,47)" fg:x="4329" fg:w="8"/><text x="16.9707%" y="127.50"></text></g><g><title>advent2021`__rust_dealloc (4 samples, 0.02%)</title><rect x="16.7516%" y="117" width="0.0154%" height="15" fill="rgb(226,26,5)" fg:x="4337" fg:w="4"/><text x="17.0016%" y="127.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (46 samples, 0.18%)</title><rect x="16.7671%" y="117" width="0.1777%" height="15" fill="rgb(249,33,26)" fg:x="4341" fg:w="46"/><text x="17.0171%" y="127.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.14%)</title><rect x="20.2433%" y="101" width="0.1352%" height="15" fill="rgb(235,183,28)" fg:x="5241" fg:w="35"/><text x="20.4933%" y="111.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (1,109 samples, 4.28%)</title><rect x="20.3785%" y="101" width="4.2835%" height="15" fill="rgb(221,5,38)" fg:x="5276" fg:w="1109"/><text x="20.6285%" y="111.50">adven..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (418 samples, 1.61%)</title><rect x="23.0475%" y="85" width="1.6145%" height="15" fill="rgb(247,18,42)" fg:x="5967" fg:w="418"/><text x="23.2975%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (359 samples, 1.39%)</title><rect x="26.6705%" y="53" width="1.3866%" height="15" fill="rgb(241,131,45)" fg:x="6905" fg:w="359"/><text x="26.9205%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (933 samples, 3.60%)</title><rect x="25.2878%" y="69" width="3.6037%" height="15" fill="rgb(249,31,29)" fg:x="6547" fg:w="933"/><text x="25.5378%" y="79.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (216 samples, 0.83%)</title><rect x="28.0572%" y="53" width="0.8343%" height="15" fill="rgb(225,111,53)" fg:x="7264" fg:w="216"/><text x="28.3072%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.03%)</title><rect x="28.8567%" y="37" width="0.0348%" height="15" fill="rgb(238,160,17)" fg:x="7471" fg:w="9"/><text x="29.1067%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,107 samples, 4.28%)</title><rect x="24.6620%" y="101" width="4.2758%" height="15" fill="rgb(214,148,48)" fg:x="6385" fg:w="1107"/><text x="24.9120%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,009 samples, 3.90%)</title><rect x="25.0406%" y="85" width="3.8973%" height="15" fill="rgb(232,36,49)" fg:x="6483" fg:w="1009"/><text x="25.2906%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.05%)</title><rect x="28.8915%" y="69" width="0.0463%" height="15" fill="rgb(209,103,24)" fg:x="7480" fg:w="12"/><text x="29.1415%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.08%)</title><rect x="28.9378%" y="101" width="0.0772%" height="15" fill="rgb(229,88,8)" fg:x="7492" fg:w="20"/><text x="29.1878%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (180 samples, 0.70%)</title><rect x="29.2893%" y="85" width="0.6952%" height="15" fill="rgb(213,181,19)" fg:x="7583" fg:w="180"/><text x="29.5393%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (262 samples, 1.01%)</title><rect x="29.0151%" y="101" width="1.0120%" height="15" fill="rgb(254,191,54)" fg:x="7512" fg:w="262"/><text x="29.2651%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.04%)</title><rect x="29.9846%" y="85" width="0.0425%" height="15" fill="rgb(241,83,37)" fg:x="7763" fg:w="11"/><text x="30.2346%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (34 samples, 0.13%)</title><rect x="30.0270%" y="101" width="0.1313%" height="15" fill="rgb(233,36,39)" fg:x="7774" fg:w="34"/><text x="30.2770%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (203 samples, 0.78%)</title><rect x="30.1584%" y="101" width="0.7841%" height="15" fill="rgb(226,3,54)" fg:x="7808" fg:w="203"/><text x="30.4084%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="30.9424%" y="101" width="0.0116%" height="15" fill="rgb(245,192,40)" fg:x="8011" fg:w="3"/><text x="31.1924%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.09%)</title><rect x="30.9540%" y="101" width="0.0888%" height="15" fill="rgb(238,167,29)" fg:x="8014" fg:w="23"/><text x="31.2040%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (187 samples, 0.72%)</title><rect x="31.0429%" y="101" width="0.7223%" height="15" fill="rgb(232,182,51)" fg:x="8037" fg:w="187"/><text x="31.2929%" y="111.50"></text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,848 samples, 14.86%)</title><rect x="16.9448%" y="117" width="14.8629%" height="15" fill="rgb(231,60,39)" fg:x="4387" fg:w="3848"/><text x="17.1948%" y="127.50">advent2021`hashbrown::r..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (11 samples, 0.04%)</title><rect x="31.7652%" y="101" width="0.0425%" height="15" fill="rgb(208,69,12)" fg:x="8224" fg:w="11"/><text x="32.0152%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="31.8076%" y="117" width="0.0309%" height="15" fill="rgb(235,93,37)" fg:x="8235" fg:w="8"/><text x="32.0576%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.03%)</title><rect x="31.8385%" y="117" width="0.0270%" height="15" fill="rgb(213,116,39)" fg:x="8243" fg:w="7"/><text x="32.0885%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.05%)</title><rect x="31.8656%" y="117" width="0.0463%" height="15" fill="rgb(222,207,29)" fg:x="8250" fg:w="12"/><text x="32.1156%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.04%)</title><rect x="31.9119%" y="117" width="0.0425%" height="15" fill="rgb(206,96,30)" fg:x="8262" fg:w="11"/><text x="32.1619%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="31.9544%" y="117" width="0.0193%" height="15" fill="rgb(218,138,4)" fg:x="8273" fg:w="5"/><text x="32.2044%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.02%)</title><rect x="31.9737%" y="117" width="0.0232%" height="15" fill="rgb(250,191,14)" fg:x="8278" fg:w="6"/><text x="32.2237%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (8 samples, 0.03%)</title><rect x="31.9969%" y="117" width="0.0309%" height="15" fill="rgb(239,60,40)" fg:x="8284" fg:w="8"/><text x="32.2469%" y="127.50"></text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::insert (4,618 samples, 17.84%)</title><rect x="14.2372%" y="133" width="17.8370%" height="15" fill="rgb(206,27,48)" fg:x="3686" fg:w="4618"/><text x="14.4872%" y="143.50">advent2021`hashbrown::raw::R..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (12 samples, 0.05%)</title><rect x="32.0278%" y="117" width="0.0463%" height="15" fill="rgb(225,35,8)" fg:x="8292" fg:w="12"/><text x="32.2778%" y="127.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,859 samples, 22.63%)</title><rect x="9.5133%" y="149" width="22.6304%" height="15" fill="rgb(250,213,24)" fg:x="2463" fg:w="5859"/><text x="9.7633%" y="159.50">advent2021`hashbrown::map::HashMap&lt;K..</text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.07%)</title><rect x="32.0742%" y="133" width="0.0695%" height="15" fill="rgb(247,123,22)" fg:x="8304" fg:w="18"/><text x="32.3242%" y="143.50"></text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.07%)</title><rect x="32.1437%" y="149" width="0.0695%" height="15" fill="rgb(231,138,38)" fg:x="8322" fg:w="18"/><text x="32.3937%" y="159.50"></text></g><g><title>advent2021`advent2021::day23::State::new_state (6,150 samples, 23.75%)</title><rect x="8.4627%" y="165" width="23.7543%" height="15" fill="rgb(231,145,46)" fg:x="2191" fg:w="6150"/><text x="8.7127%" y="175.50">advent2021`advent2021::day23::State::n..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (146 samples, 0.56%)</title><rect x="32.4604%" y="101" width="0.5639%" height="15" fill="rgb(251,118,11)" fg:x="8404" fg:w="146"/><text x="32.7104%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (74 samples, 0.29%)</title><rect x="32.7385%" y="85" width="0.2858%" height="15" fill="rgb(217,147,25)" fg:x="8476" fg:w="74"/><text x="32.9885%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (182 samples, 0.70%)</title><rect x="32.3252%" y="133" width="0.7030%" height="15" fill="rgb(247,81,37)" fg:x="8369" fg:w="182"/><text x="32.5752%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (160 samples, 0.62%)</title><rect x="32.4102%" y="117" width="0.6180%" height="15" fill="rgb(209,12,38)" fg:x="8391" fg:w="160"/><text x="32.6602%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="33.0475%" y="101" width="0.0116%" height="15" fill="rgb(227,1,9)" fg:x="8556" fg:w="3"/><text x="33.2975%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.05%)</title><rect x="33.0668%" y="85" width="0.0463%" height="15" fill="rgb(248,47,43)" fg:x="8561" fg:w="12"/><text x="33.3168%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.05%)</title><rect x="33.0668%" y="69" width="0.0463%" height="15" fill="rgb(221,10,30)" fg:x="8561" fg:w="12"/><text x="33.3168%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="33.0900%" y="53" width="0.0232%" height="15" fill="rgb(210,229,1)" fg:x="8567" fg:w="6"/><text x="33.3400%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.07%)</title><rect x="33.0591%" y="101" width="0.0657%" height="15" fill="rgb(222,148,37)" fg:x="8559" fg:w="17"/><text x="33.3091%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="33.1132%" y="85" width="0.0116%" height="15" fill="rgb(234,67,33)" fg:x="8573" fg:w="3"/><text x="33.3632%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.08%)</title><rect x="33.0475%" y="117" width="0.0811%" height="15" fill="rgb(247,98,35)" fg:x="8556" fg:w="21"/><text x="33.2975%" y="127.50"></text></g><g><title>advent2021`alloc::raw_vec::finish_grow (221 samples, 0.85%)</title><rect x="32.2789%" y="149" width="0.8536%" height="15" fill="rgb(247,138,52)" fg:x="8357" fg:w="221"/><text x="32.5289%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.09%)</title><rect x="33.0398%" y="133" width="0.0927%" height="15" fill="rgb(213,79,30)" fg:x="8554" fg:w="24"/><text x="33.2898%" y="143.50"></text></g><g><title>advent2021`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (243 samples, 0.94%)</title><rect x="32.2171%" y="165" width="0.9386%" height="15" fill="rgb(246,177,23)" fg:x="8341" fg:w="243"/><text x="32.4671%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.02%)</title><rect x="33.1363%" y="149" width="0.0193%" height="15" fill="rgb(230,62,27)" fg:x="8579" fg:w="5"/><text x="33.3863%" y="159.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,240 samples, 4.79%)</title><rect x="33.1634%" y="165" width="4.7895%" height="15" fill="rgb(216,154,8)" fg:x="8586" fg:w="1240"/><text x="33.4134%" y="175.50">advent..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (334 samples, 1.29%)</title><rect x="36.6628%" y="149" width="1.2901%" height="15" fill="rgb(244,35,45)" fg:x="9492" fg:w="334"/><text x="36.9128%" y="159.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.11%)</title><rect x="37.9529%" y="165" width="0.1120%" height="15" fill="rgb(251,115,12)" fg:x="9826" fg:w="29"/><text x="38.2029%" y="175.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (512 samples, 1.98%)</title><rect x="38.0649%" y="165" width="1.9776%" height="15" fill="rgb(240,54,50)" fg:x="9855" fg:w="512"/><text x="38.3149%" y="175.50">a..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (150 samples, 0.58%)</title><rect x="39.4631%" y="149" width="0.5794%" height="15" fill="rgb(233,84,52)" fg:x="10217" fg:w="150"/><text x="39.7131%" y="159.50"></text></g><g><title>advent2021`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,379 samples, 36.23%)</title><rect x="3.8857%" y="181" width="36.2263%" height="15" fill="rgb(207,117,47)" fg:x="1006" fg:w="9379"/><text x="4.1357%" y="191.50">advent2021`core::ops::function::impls::_&lt;impl core::ops::fu..</text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.07%)</title><rect x="40.0463%" y="165" width="0.0657%" height="15" fill="rgb(249,43,39)" fg:x="10368" fg:w="17"/><text x="40.2963%" y="175.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (16 samples, 0.06%)</title><rect x="40.1120%" y="181" width="0.0618%" height="15" fill="rgb(209,38,44)" fg:x="10385" fg:w="16"/><text x="40.3620%" y="191.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (19 samples, 0.07%)</title><rect x="40.1738%" y="181" width="0.0734%" height="15" fill="rgb(236,212,23)" fg:x="10401" fg:w="19"/><text x="40.4238%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (72 samples, 0.28%)</title><rect x="40.3631%" y="165" width="0.2781%" height="15" fill="rgb(242,79,21)" fg:x="10450" fg:w="72"/><text x="40.6131%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="40.6412%" y="165" width="0.0193%" height="15" fill="rgb(211,96,35)" fg:x="10522" fg:w="5"/><text x="40.8912%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (111 samples, 0.43%)</title><rect x="40.2472%" y="181" width="0.4287%" height="15" fill="rgb(253,215,40)" fg:x="10420" fg:w="111"/><text x="40.4972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="40.6605%" y="165" width="0.0154%" height="15" fill="rgb(211,81,21)" fg:x="10527" fg:w="4"/><text x="40.9105%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="40.6643%" y="149" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="10528" fg:w="3"/><text x="40.9143%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.03%)</title><rect x="40.6759%" y="181" width="0.0270%" height="15" fill="rgb(235,213,38)" fg:x="10531" fg:w="7"/><text x="40.9259%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="40.6875%" y="165" width="0.0154%" height="15" fill="rgb(237,122,38)" fg:x="10534" fg:w="4"/><text x="40.9375%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.06%)</title><rect x="40.7030%" y="181" width="0.0579%" height="15" fill="rgb(244,218,35)" fg:x="10538" fg:w="15"/><text x="40.9530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (78 samples, 0.30%)</title><rect x="40.7609%" y="181" width="0.3013%" height="15" fill="rgb(240,68,47)" fg:x="10553" fg:w="78"/><text x="41.0109%" y="191.50"></text></g><g><title>advent2021`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,822 samples, 37.94%)</title><rect x="3.1402%" y="197" width="37.9374%" height="15" fill="rgb(210,16,53)" fg:x="813" fg:w="9822"/><text x="3.3902%" y="207.50">advent2021`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core:..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="41.0622%" y="181" width="0.0154%" height="15" fill="rgb(235,124,12)" fg:x="10631" fg:w="4"/><text x="41.3122%" y="191.50"></text></g><g><title>advent2021`__rdl_realloc (3 samples, 0.01%)</title><rect x="41.1278%" y="181" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="10648" fg:w="3"/><text x="41.3778%" y="191.50"></text></g><g><title>advent2021`__rdl_realloc (5 samples, 0.02%)</title><rect x="41.1703%" y="165" width="0.0193%" height="15" fill="rgb(250,166,2)" fg:x="10659" fg:w="5"/><text x="41.4203%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.11%)</title><rect x="41.3094%" y="133" width="0.1081%" height="15" fill="rgb(242,216,29)" fg:x="10695" fg:w="28"/><text x="41.5594%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (6 samples, 0.02%)</title><rect x="41.4677%" y="117" width="0.0232%" height="15" fill="rgb(230,116,27)" fg:x="10736" fg:w="6"/><text x="41.7177%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.09%)</title><rect x="41.4909%" y="117" width="0.0927%" height="15" fill="rgb(228,99,48)" fg:x="10742" fg:w="24"/><text x="41.7409%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.17%)</title><rect x="41.6029%" y="101" width="0.1661%" height="15" fill="rgb(253,11,6)" fg:x="10771" fg:w="43"/><text x="41.8529%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.07%)</title><rect x="41.6956%" y="85" width="0.0734%" height="15" fill="rgb(247,143,39)" fg:x="10795" fg:w="19"/><text x="41.9456%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (49 samples, 0.19%)</title><rect x="41.5836%" y="117" width="0.1893%" height="15" fill="rgb(236,97,10)" fg:x="10766" fg:w="49"/><text x="41.8336%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.08%)</title><rect x="41.7729%" y="117" width="0.0850%" height="15" fill="rgb(233,208,19)" fg:x="10815" fg:w="22"/><text x="42.0229%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.05%)</title><rect x="41.8579%" y="117" width="0.0541%" height="15" fill="rgb(216,164,2)" fg:x="10837" fg:w="14"/><text x="42.1079%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.05%)</title><rect x="41.8617%" y="101" width="0.0502%" height="15" fill="rgb(220,129,5)" fg:x="10838" fg:w="13"/><text x="42.1117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="41.9003%" y="85" width="0.0116%" height="15" fill="rgb(242,17,10)" fg:x="10848" fg:w="3"/><text x="42.1503%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (151 samples, 0.58%)</title><rect x="41.4175%" y="133" width="0.5832%" height="15" fill="rgb(242,107,0)" fg:x="10723" fg:w="151"/><text x="41.6675%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.09%)</title><rect x="41.9119%" y="117" width="0.0888%" height="15" fill="rgb(251,28,31)" fg:x="10851" fg:w="23"/><text x="42.1619%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.01%)</title><rect x="42.0046%" y="133" width="0.0116%" height="15" fill="rgb(233,223,10)" fg:x="10875" fg:w="3"/><text x="42.2546%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (204 samples, 0.79%)</title><rect x="41.2360%" y="149" width="0.7879%" height="15" fill="rgb(215,21,27)" fg:x="10676" fg:w="204"/><text x="41.4860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.11%)</title><rect x="42.0239%" y="149" width="0.1120%" height="15" fill="rgb(232,23,21)" fg:x="10880" fg:w="29"/><text x="42.2739%" y="159.50"></text></g><g><title>advent2021`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (272 samples, 1.05%)</title><rect x="41.0931%" y="197" width="1.0506%" height="15" fill="rgb(244,5,23)" fg:x="10639" fg:w="272"/><text x="41.3431%" y="207.50"></text></g><g><title>advent2021`alloc::raw_vec::finish_grow (259 samples, 1.00%)</title><rect x="41.1433%" y="181" width="1.0004%" height="15" fill="rgb(226,81,46)" fg:x="10652" fg:w="259"/><text x="41.3933%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (245 samples, 0.95%)</title><rect x="41.1974%" y="165" width="0.9463%" height="15" fill="rgb(247,70,30)" fg:x="10666" fg:w="245"/><text x="41.4474%" y="175.50"></text></g><g><title>advent2021`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12 samples, 0.05%)</title><rect x="42.1437%" y="197" width="0.0463%" height="15" fill="rgb(212,68,19)" fg:x="10911" fg:w="12"/><text x="42.3937%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (68 samples, 0.26%)</title><rect x="42.2866%" y="165" width="0.2626%" height="15" fill="rgb(240,187,13)" fg:x="10948" fg:w="68"/><text x="42.5366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.16%)</title><rect x="42.3909%" y="149" width="0.1584%" height="15" fill="rgb(223,113,26)" fg:x="10975" fg:w="41"/><text x="42.6409%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (80 samples, 0.31%)</title><rect x="42.2596%" y="181" width="0.3090%" height="15" fill="rgb(206,192,2)" fg:x="10941" fg:w="80"/><text x="42.5096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="42.5492%" y="165" width="0.0193%" height="15" fill="rgb(241,108,4)" fg:x="11016" fg:w="5"/><text x="42.7992%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (103 samples, 0.40%)</title><rect x="42.1900%" y="197" width="0.3978%" height="15" fill="rgb(247,173,49)" fg:x="10923" fg:w="103"/><text x="42.4400%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="42.5686%" y="181" width="0.0193%" height="15" fill="rgb(224,114,35)" fg:x="11021" fg:w="5"/><text x="42.8186%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="42.5686%" y="165" width="0.0193%" height="15" fill="rgb(245,159,27)" fg:x="11021" fg:w="5"/><text x="42.8186%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="42.5879%" y="197" width="0.0154%" height="15" fill="rgb(245,172,44)" fg:x="11026" fg:w="4"/><text x="42.8379%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.02%)</title><rect x="42.6033%" y="197" width="0.0193%" height="15" fill="rgb(236,23,11)" fg:x="11030" fg:w="5"/><text x="42.8533%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="42.6226%" y="197" width="0.0154%" height="15" fill="rgb(205,117,38)" fg:x="11035" fg:w="4"/><text x="42.8726%" y="207.50"></text></g><g><title>advent2021`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,375 samples, 40.07%)</title><rect x="2.5763%" y="213" width="40.0734%" height="15" fill="rgb(237,72,25)" fg:x="667" fg:w="10375"/><text x="2.8263%" y="223.50">advent2021`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::Spe..</text></g><g><title>advent2021`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (415 samples, 1.60%)</title><rect x="42.6574%" y="213" width="1.6029%" height="15" fill="rgb(244,70,9)" fg:x="11044" fg:w="415"/><text x="42.9074%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (129 samples, 0.50%)</title><rect x="45.2453%" y="149" width="0.4983%" height="15" fill="rgb(217,125,39)" fg:x="11714" fg:w="129"/><text x="45.4953%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (560 samples, 2.16%)</title><rect x="44.4264%" y="197" width="2.1630%" height="15" fill="rgb(235,36,10)" fg:x="11502" fg:w="560"/><text x="44.6764%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (525 samples, 2.03%)</title><rect x="44.5616%" y="181" width="2.0278%" height="15" fill="rgb(251,123,47)" fg:x="11537" fg:w="525"/><text x="44.8116%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (504 samples, 1.95%)</title><rect x="44.6427%" y="165" width="1.9467%" height="15" fill="rgb(221,13,13)" fg:x="11558" fg:w="504"/><text x="44.8927%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (219 samples, 0.85%)</title><rect x="45.7435%" y="149" width="0.8459%" height="15" fill="rgb(238,131,9)" fg:x="11843" fg:w="219"/><text x="45.9935%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.04%)</title><rect x="46.5508%" y="133" width="0.0386%" height="15" fill="rgb(211,50,8)" fg:x="12052" fg:w="10"/><text x="46.8008%" y="143.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (804 samples, 3.11%)</title><rect x="44.2603%" y="213" width="3.1054%" height="15" fill="rgb(245,182,24)" fg:x="11459" fg:w="804"/><text x="44.5103%" y="223.50">adv..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (200 samples, 0.77%)</title><rect x="46.5933%" y="197" width="0.7725%" height="15" fill="rgb(242,14,37)" fg:x="12063" fg:w="200"/><text x="46.8433%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (754 samples, 2.91%)</title><rect x="47.6902%" y="181" width="2.9123%" height="15" fill="rgb(246,228,12)" fg:x="12347" fg:w="754"/><text x="47.9402%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`free (792 samples, 3.06%)</title><rect x="47.5744%" y="197" width="3.0591%" height="15" fill="rgb(213,55,15)" fg:x="12317" fg:w="792"/><text x="47.8244%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.03%)</title><rect x="50.6025%" y="181" width="0.0309%" height="15" fill="rgb(209,9,3)" fg:x="13101" fg:w="8"/><text x="50.8525%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.07%)</title><rect x="50.6334%" y="197" width="0.0734%" height="15" fill="rgb(230,59,30)" fg:x="13109" fg:w="19"/><text x="50.8834%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (171 samples, 0.66%)</title><rect x="51.2360%" y="165" width="0.6605%" height="15" fill="rgb(209,121,21)" fg:x="13265" fg:w="171"/><text x="51.4860%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (314 samples, 1.21%)</title><rect x="50.7068%" y="197" width="1.2128%" height="15" fill="rgb(220,109,13)" fg:x="13128" fg:w="314"/><text x="50.9568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (179 samples, 0.69%)</title><rect x="51.2283%" y="181" width="0.6914%" height="15" fill="rgb(232,18,1)" fg:x="13263" fg:w="179"/><text x="51.4783%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (6 samples, 0.02%)</title><rect x="51.8965%" y="165" width="0.0232%" height="15" fill="rgb(215,41,42)" fg:x="13436" fg:w="6"/><text x="52.1465%" y="175.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,183 samples, 4.57%)</title><rect x="47.3658%" y="213" width="4.5693%" height="15" fill="rgb(224,123,36)" fg:x="12263" fg:w="1183"/><text x="47.6158%" y="223.50">adven..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="51.9197%" y="197" width="0.0154%" height="15" fill="rgb(240,125,3)" fg:x="13442" fg:w="4"/><text x="52.1697%" y="207.50"></text></g><g><title>advent2021`__rdl_alloc (4 samples, 0.02%)</title><rect x="51.9428%" y="213" width="0.0154%" height="15" fill="rgb(205,98,50)" fg:x="13448" fg:w="4"/><text x="52.1928%" y="223.50"></text></g><g><title>advent2021`__rdl_dealloc (9 samples, 0.03%)</title><rect x="51.9583%" y="213" width="0.0348%" height="15" fill="rgb(205,185,37)" fg:x="13452" fg:w="9"/><text x="52.2083%" y="223.50"></text></g><g><title>advent2021`__rust_alloc (5 samples, 0.02%)</title><rect x="51.9930%" y="213" width="0.0193%" height="15" fill="rgb(238,207,15)" fg:x="13461" fg:w="5"/><text x="52.2430%" y="223.50"></text></g><g><title>advent2021`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (753 samples, 2.91%)</title><rect x="52.0201%" y="213" width="2.9085%" height="15" fill="rgb(213,199,42)" fg:x="13468" fg:w="753"/><text x="52.2701%" y="223.50">ad..</text></g><g><title>advent2021`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="54.9285%" y="213" width="0.0116%" height="15" fill="rgb(235,201,11)" fg:x="14221" fg:w="3"/><text x="55.1785%" y="223.50"></text></g><g><title>advent2021`&lt;advent2021::day23::State as core::hash::Hash&gt;::hash (847 samples, 3.27%)</title><rect x="55.6199%" y="197" width="3.2715%" height="15" fill="rgb(207,46,11)" fg:x="14400" fg:w="847"/><text x="55.8699%" y="207.50">adv..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (664 samples, 2.56%)</title><rect x="56.3268%" y="181" width="2.5647%" height="15" fill="rgb(241,35,35)" fg:x="14583" fg:w="664"/><text x="56.5768%" y="191.50">ad..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.20%)</title><rect x="58.8915%" y="197" width="0.1970%" height="15" fill="rgb(243,32,47)" fg:x="15247" fg:w="51"/><text x="59.1415%" y="207.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (30 samples, 0.12%)</title><rect x="59.0885%" y="197" width="0.1159%" height="15" fill="rgb(247,202,23)" fg:x="15298" fg:w="30"/><text x="59.3385%" y="207.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="59.1503%" y="181" width="0.0541%" height="15" fill="rgb(219,102,11)" fg:x="15314" fg:w="14"/><text x="59.4003%" y="191.50"></text></g><g><title>advent2021`&lt;advent2021::day23::State as core::hash::Hash&gt;::hash (7 samples, 0.03%)</title><rect x="60.5871%" y="181" width="0.0270%" height="15" fill="rgb(243,110,44)" fg:x="15686" fg:w="7"/><text x="60.8371%" y="191.50"></text></g><g><title>advent2021`&lt;advent2021::day23::State as core::hash::Hash&gt;::hash (3,860 samples, 14.91%)</title><rect x="64.8706%" y="165" width="14.9092%" height="15" fill="rgb(222,74,54)" fg:x="16795" fg:w="3860"/><text x="65.1206%" y="175.50">advent2021`&lt;advent2021:..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,444 samples, 5.58%)</title><rect x="74.2024%" y="149" width="5.5774%" height="15" fill="rgb(216,99,12)" fg:x="19211" fg:w="1444"/><text x="74.4524%" y="159.50">advent2..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (149 samples, 0.58%)</title><rect x="79.7798%" y="165" width="0.5755%" height="15" fill="rgb(226,22,26)" fg:x="20655" fg:w="149"/><text x="80.0298%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.07%)</title><rect x="80.3553%" y="165" width="0.0734%" height="15" fill="rgb(217,163,10)" fg:x="20804" fg:w="19"/><text x="80.6053%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (43 samples, 0.17%)</title><rect x="80.4287%" y="165" width="0.1661%" height="15" fill="rgb(213,25,53)" fg:x="20823" fg:w="43"/><text x="80.6787%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (43 samples, 0.17%)</title><rect x="80.4287%" y="149" width="0.1661%" height="15" fill="rgb(252,105,26)" fg:x="20823" fg:w="43"/><text x="80.6787%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (43 samples, 0.17%)</title><rect x="80.4287%" y="133" width="0.1661%" height="15" fill="rgb(220,39,43)" fg:x="20823" fg:w="43"/><text x="80.6787%" y="143.50"></text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::insert (5,552 samples, 21.44%)</title><rect x="59.2043%" y="197" width="21.4446%" height="15" fill="rgb(229,68,48)" fg:x="15328" fg:w="5552"/><text x="59.4543%" y="207.50">advent2021`hashbrown::raw::RawTabl..</text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,187 samples, 20.03%)</title><rect x="60.6141%" y="181" width="20.0348%" height="15" fill="rgb(252,8,32)" fg:x="15693" fg:w="5187"/><text x="60.8641%" y="191.50">advent2021`hashbrown::raw::RawT..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (14 samples, 0.05%)</title><rect x="80.5948%" y="165" width="0.0541%" height="15" fill="rgb(223,20,43)" fg:x="20866" fg:w="14"/><text x="80.8448%" y="175.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,659 samples, 25.72%)</title><rect x="54.9401%" y="213" width="25.7204%" height="15" fill="rgb(229,81,49)" fg:x="14224" fg:w="6659"/><text x="55.1901%" y="223.50">advent2021`hashbrown::map::HashMap&lt;K,V,S,..</text></g><g><title>advent2021`hashbrown::map::make_hash (17 samples, 0.07%)</title><rect x="80.6605%" y="213" width="0.0657%" height="15" fill="rgb(236,28,36)" fg:x="20883" fg:w="17"/><text x="80.9105%" y="223.50"></text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.01%)</title><rect x="80.7261%" y="213" width="0.0116%" height="15" fill="rgb(249,185,26)" fg:x="20900" fg:w="3"/><text x="80.9761%" y="223.50"></text></g><g><title>advent2021`&lt;advent2021::day23::State as core::hash::Hash&gt;::hash (1,390 samples, 5.37%)</title><rect x="88.7988%" y="197" width="5.3689%" height="15" fill="rgb(249,174,33)" fg:x="22990" fg:w="1390"/><text x="89.0488%" y="207.50">advent2..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,078 samples, 4.16%)</title><rect x="90.0039%" y="181" width="4.1638%" height="15" fill="rgb(233,201,37)" fg:x="23302" fg:w="1078"/><text x="90.2539%" y="191.50">adven..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (116 samples, 0.45%)</title><rect x="94.1676%" y="197" width="0.4480%" height="15" fill="rgb(221,78,26)" fg:x="24380" fg:w="116"/><text x="94.4176%" y="207.50"></text></g><g><title>advent2021`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,065 samples, 15.70%)</title><rect x="80.7377%" y="213" width="15.7010%" height="15" fill="rgb(250,127,30)" fg:x="20903" fg:w="4065"/><text x="80.9877%" y="223.50">advent2021`std::collecti..</text></g><g><title>advent2021`hashbrown::map::make_hash (472 samples, 1.82%)</title><rect x="94.6157%" y="197" width="1.8231%" height="15" fill="rgb(230,49,44)" fg:x="24496" fg:w="472"/><text x="94.8657%" y="207.50">a..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (171 samples, 0.66%)</title><rect x="95.7783%" y="181" width="0.6605%" height="15" fill="rgb(229,67,23)" fg:x="24797" fg:w="171"/><text x="96.0283%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="96.4388%" y="213" width="0.0154%" height="15" fill="rgb(249,83,47)" fg:x="24968" fg:w="4"/><text x="96.6888%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="96.4542%" y="213" width="0.0154%" height="15" fill="rgb(215,43,3)" fg:x="24972" fg:w="4"/><text x="96.7042%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (405 samples, 1.56%)</title><rect x="96.7169%" y="197" width="1.5643%" height="15" fill="rgb(238,154,13)" fg:x="25040" fg:w="405"/><text x="96.9669%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.05%)</title><rect x="98.2812%" y="197" width="0.0541%" height="15" fill="rgb(219,56,2)" fg:x="25445" fg:w="14"/><text x="98.5312%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (488 samples, 1.88%)</title><rect x="96.4697%" y="213" width="1.8849%" height="15" fill="rgb(233,0,4)" fg:x="24976" fg:w="488"/><text x="96.7197%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.02%)</title><rect x="98.3353%" y="197" width="0.0193%" height="15" fill="rgb(235,30,7)" fg:x="25459" fg:w="5"/><text x="98.5853%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.02%)</title><rect x="98.3353%" y="181" width="0.0193%" height="15" fill="rgb(250,79,13)" fg:x="25459" fg:w="5"/><text x="98.5853%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (77 samples, 0.30%)</title><rect x="98.3546%" y="213" width="0.2974%" height="15" fill="rgb(211,146,34)" fg:x="25464" fg:w="77"/><text x="98.6046%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (77 samples, 0.30%)</title><rect x="98.3546%" y="197" width="0.2974%" height="15" fill="rgb(228,22,38)" fg:x="25464" fg:w="77"/><text x="98.6046%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (77 samples, 0.30%)</title><rect x="98.3546%" y="181" width="0.2974%" height="15" fill="rgb(235,168,5)" fg:x="25464" fg:w="77"/><text x="98.6046%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="98.7138%" y="181" width="0.0116%" height="15" fill="rgb(221,155,16)" fg:x="25557" fg:w="3"/><text x="98.9638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.08%)</title><rect x="98.6520%" y="213" width="0.0850%" height="15" fill="rgb(215,215,53)" fg:x="25541" fg:w="22"/><text x="98.9020%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.06%)</title><rect x="98.6752%" y="197" width="0.0618%" height="15" fill="rgb(223,4,10)" fg:x="25547" fg:w="16"/><text x="98.9252%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="98.7254%" y="181" width="0.0116%" height="15" fill="rgb(234,103,6)" fg:x="25560" fg:w="3"/><text x="98.9754%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (25 samples, 0.10%)</title><rect x="98.7370%" y="213" width="0.0966%" height="15" fill="rgb(227,97,0)" fg:x="25563" fg:w="25"/><text x="98.9870%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (182 samples, 0.70%)</title><rect x="98.8335%" y="213" width="0.7030%" height="15" fill="rgb(234,150,53)" fg:x="25588" fg:w="182"/><text x="99.0835%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.05%)</title><rect x="99.5365%" y="213" width="0.0541%" height="15" fill="rgb(228,201,54)" fg:x="25770" fg:w="14"/><text x="99.7865%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.02%)</title><rect x="99.5906%" y="213" width="0.0193%" height="15" fill="rgb(222,22,37)" fg:x="25784" fg:w="5"/><text x="99.8406%" y="223.50"></text></g><g><title>advent2021`advent2021::day23::part1 (25,772 samples, 99.54%)</title><rect x="0.0811%" y="229" width="99.5442%" height="15" fill="rgb(237,53,32)" fg:x="21" fg:w="25772"/><text x="0.3311%" y="239.50">advent2021`advent2021::day23::part1</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="99.6099%" y="213" width="0.0154%" height="15" fill="rgb(233,25,53)" fg:x="25789" fg:w="4"/><text x="99.8599%" y="223.50"></text></g><g><title>advent2021`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (3 samples, 0.01%)</title><rect x="99.6253%" y="229" width="0.0116%" height="15" fill="rgb(210,40,34)" fg:x="25793" fg:w="3"/><text x="99.8753%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="99.6524%" y="229" width="0.0309%" height="15" fill="rgb(241,220,44)" fg:x="25800" fg:w="8"/><text x="99.9024%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="99.6833%" y="229" width="0.0116%" height="15" fill="rgb(235,28,35)" fg:x="25808" fg:w="3"/><text x="99.9333%" y="239.50"></text></g><g><title>advent2021`main (25,816 samples, 99.71%)</title><rect x="0.0000%" y="309" width="99.7142%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="25816"/><text x="0.2500%" y="319.50">advent2021`main</text></g><g><title>advent2021`std::rt::lang_start_internal (25,816 samples, 99.71%)</title><rect x="0.0000%" y="293" width="99.7142%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="25816"/><text x="0.2500%" y="303.50">advent2021`std::rt::lang_start_internal</text></g><g><title>advent2021`std::rt::lang_start::_{{closure}} (25,816 samples, 99.71%)</title><rect x="0.0000%" y="277" width="99.7142%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="25816"/><text x="0.2500%" y="287.50">advent2021`std::rt::lang_start::_{{closure}}</text></g><g><title>advent2021`std::sys_common::backtrace::__rust_begin_short_backtrace (25,816 samples, 99.71%)</title><rect x="0.0000%" y="261" width="99.7142%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="25816"/><text x="0.2500%" y="271.50">advent2021`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>advent2021`advent2021::main (25,816 samples, 99.71%)</title><rect x="0.0000%" y="245" width="99.7142%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="25816"/><text x="0.2500%" y="255.50">advent2021`advent2021::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="99.6949%" y="229" width="0.0193%" height="15" fill="rgb(250,156,29)" fg:x="25811" fg:w="5"/><text x="99.9449%" y="239.50"></text></g><g><title>all (25,890 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="25890"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (25,890 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="25890"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (73 samples, 0.28%)</title><rect x="99.7180%" y="309" width="0.2820%" height="15" fill="rgb(241,47,5)" fg:x="25817" fg:w="73"/><text x="99.9680%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (73 samples, 0.28%)</title><rect x="99.7180%" y="293" width="0.2820%" height="15" fill="rgb(233,42,35)" fg:x="25817" fg:w="73"/><text x="99.9680%" y="303.50"></text></g></svg></svg>