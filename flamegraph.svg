<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="6642"><g><title>advent2021`regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="0.0602%" y="133" width="0.0151%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.3102%" y="143.50"></text></g><g><title>advent2021`regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="0.0602%" y="117" width="0.0151%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.3102%" y="127.50"></text></g><g><title>advent2021`regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="0.0602%" y="101" width="0.0151%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3102%" y="111.50"></text></g><g><title>advent2021`regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="0.0602%" y="85" width="0.0151%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3102%" y="95.50"></text></g><g><title>advent2021`regex::compile::Compiler::c_repeat_range (1 samples, 0.02%)</title><rect x="0.0602%" y="69" width="0.0151%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.3102%" y="79.50"></text></g><g><title>advent2021`regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="0.0602%" y="53" width="0.0151%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.3102%" y="63.50"></text></g><g><title>advent2021`regex::compile::CompileClass::c_utf8_seq (1 samples, 0.02%)</title><rect x="0.0602%" y="37" width="0.0151%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.3102%" y="47.50"></text></g><g><title>advent2021`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.09%)</title><rect x="0.0000%" y="277" width="0.0903%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="287.50"></text></g><g><title>advent2021`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="0.0602%" y="261" width="0.0301%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="2"/><text x="0.3102%" y="271.50"></text></g><g><title>advent2021`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.03%)</title><rect x="0.0602%" y="245" width="0.0301%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="2"/><text x="0.3102%" y="255.50"></text></g><g><title>advent2021`advent2021::day19::parse_beacon (2 samples, 0.03%)</title><rect x="0.0602%" y="229" width="0.0301%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="2"/><text x="0.3102%" y="239.50"></text></g><g><title>advent2021`std::sync::once::Once::call_inner (2 samples, 0.03%)</title><rect x="0.0602%" y="213" width="0.0301%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="2"/><text x="0.3102%" y="223.50"></text></g><g><title>advent2021`std::sync::once::Once::call_once::_{{closure}} (2 samples, 0.03%)</title><rect x="0.0602%" y="197" width="0.0301%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="2"/><text x="0.3102%" y="207.50"></text></g><g><title>advent2021`regex::re_unicode::Regex::new (2 samples, 0.03%)</title><rect x="0.0602%" y="181" width="0.0301%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="2"/><text x="0.3102%" y="191.50"></text></g><g><title>advent2021`regex::re_builder::unicode::RegexBuilder::build (2 samples, 0.03%)</title><rect x="0.0602%" y="165" width="0.0301%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="2"/><text x="0.3102%" y="175.50"></text></g><g><title>advent2021`regex::exec::ExecBuilder::build (2 samples, 0.03%)</title><rect x="0.0602%" y="149" width="0.0301%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="2"/><text x="0.3102%" y="159.50"></text></g><g><title>advent2021`regex_syntax::parser::Parser::parse (1 samples, 0.02%)</title><rect x="0.0753%" y="133" width="0.0151%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.3253%" y="143.50"></text></g><g><title>advent2021`regex_syntax::ast::visitor::visit (1 samples, 0.02%)</title><rect x="0.0753%" y="117" width="0.0151%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.3253%" y="127.50"></text></g><g><title>advent2021`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.02%)</title><rect x="0.0753%" y="101" width="0.0151%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.3253%" y="111.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="0.0903%" y="277" width="0.0602%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="4"/><text x="0.3403%" y="287.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="0.1506%" y="277" width="0.0602%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="4"/><text x="0.4006%" y="287.50"></text></g><g><title>advent2021`__rdl_dealloc (10 samples, 0.15%)</title><rect x="0.2108%" y="277" width="0.1506%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="10"/><text x="0.4608%" y="287.50"></text></g><g><title>advent2021`__rust_dealloc (4 samples, 0.06%)</title><rect x="0.3613%" y="277" width="0.0602%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="4"/><text x="0.6113%" y="287.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (216 samples, 3.25%)</title><rect x="10.7949%" y="245" width="3.2520%" height="15" fill="rgb(247,18,42)" fg:x="717" fg:w="216"/><text x="11.0449%" y="255.50">adv..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.24%)</title><rect x="14.3330%" y="229" width="0.2409%" height="15" fill="rgb(241,131,45)" fg:x="952" fg:w="16"/><text x="14.5830%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="14.7546%" y="213" width="0.0301%" height="15" fill="rgb(249,31,29)" fg:x="980" fg:w="2"/><text x="15.0046%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (39 samples, 0.59%)</title><rect x="17.7958%" y="197" width="0.5872%" height="15" fill="rgb(225,111,53)" fg:x="1182" fg:w="39"/><text x="18.0458%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (332 samples, 5.00%)</title><rect x="14.5739%" y="229" width="4.9985%" height="15" fill="rgb(238,160,17)" fg:x="968" fg:w="332"/><text x="14.8239%" y="239.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (318 samples, 4.79%)</title><rect x="14.7847%" y="213" width="4.7877%" height="15" fill="rgb(214,148,48)" fg:x="982" fg:w="318"/><text x="15.0347%" y="223.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (79 samples, 1.19%)</title><rect x="18.3830%" y="197" width="1.1894%" height="15" fill="rgb(232,36,49)" fg:x="1221" fg:w="79"/><text x="18.6330%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.06%)</title><rect x="19.5122%" y="181" width="0.0602%" height="15" fill="rgb(209,103,24)" fg:x="1296" fg:w="4"/><text x="19.7622%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (370 samples, 5.57%)</title><rect x="14.0470%" y="245" width="5.5706%" height="15" fill="rgb(229,88,8)" fg:x="933" fg:w="370"/><text x="14.2970%" y="255.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="19.5724%" y="229" width="0.0452%" height="15" fill="rgb(213,181,19)" fg:x="1300" fg:w="3"/><text x="19.8224%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.09%)</title><rect x="19.6176%" y="245" width="0.0903%" height="15" fill="rgb(254,191,54)" fg:x="1303" fg:w="6"/><text x="19.8676%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (3 samples, 0.05%)</title><rect x="19.7079%" y="245" width="0.0452%" height="15" fill="rgb(241,83,37)" fg:x="1309" fg:w="3"/><text x="19.9579%" y="255.50"></text></g><g><title>advent2021`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (956 samples, 14.39%)</title><rect x="5.4050%" y="261" width="14.3933%" height="15" fill="rgb(233,36,39)" fg:x="359" fg:w="956"/><text x="5.6550%" y="271.50">advent2021`&lt;alloc::vec..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="19.7531%" y="245" width="0.0452%" height="15" fill="rgb(226,3,54)" fg:x="1312" fg:w="3"/><text x="20.0031%" y="255.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.41%)</title><rect x="19.7983%" y="261" width="0.4065%" height="15" fill="rgb(245,192,40)" fg:x="1315" fg:w="27"/><text x="20.0483%" y="271.50"></text></g><g><title>advent2021`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 1.08%)</title><rect x="20.2048%" y="261" width="1.0840%" height="15" fill="rgb(238,167,29)" fg:x="1342" fg:w="72"/><text x="20.4548%" y="271.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (255 samples, 3.84%)</title><rect x="21.2888%" y="261" width="3.8392%" height="15" fill="rgb(232,182,51)" fg:x="1414" fg:w="255"/><text x="21.5388%" y="271.50">adve..</text></g><g><title>advent2021`__rdl_alloc (2 samples, 0.03%)</title><rect x="25.1280%" y="261" width="0.0301%" height="15" fill="rgb(231,60,39)" fg:x="1669" fg:w="2"/><text x="25.3780%" y="271.50"></text></g><g><title>advent2021`__rust_alloc (1 samples, 0.02%)</title><rect x="25.1581%" y="261" width="0.0151%" height="15" fill="rgb(208,69,12)" fg:x="1671" fg:w="1"/><text x="25.4081%" y="271.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4,048 samples, 60.95%)</title><rect x="25.1731%" y="261" width="60.9455%" height="15" fill="rgb(235,93,37)" fg:x="1672" fg:w="4048"/><text x="25.4231%" y="271.50">advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,570 samples, 23.64%)</title><rect x="62.4812%" y="245" width="23.6375%" height="15" fill="rgb(213,116,39)" fg:x="4150" fg:w="1570"/><text x="62.7312%" y="255.50">advent2021`&lt;std::collections::hash::ma..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (67 samples, 1.01%)</title><rect x="87.5038%" y="245" width="1.0087%" height="15" fill="rgb(222,207,29)" fg:x="5812" fg:w="67"/><text x="87.7538%" y="255.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (2 samples, 0.03%)</title><rect x="89.0997%" y="229" width="0.0301%" height="15" fill="rgb(206,96,30)" fg:x="5918" fg:w="2"/><text x="89.3497%" y="239.50"></text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.33%)</title><rect x="89.7170%" y="213" width="0.3312%" height="15" fill="rgb(218,138,4)" fg:x="5959" fg:w="22"/><text x="89.9670%" y="223.50"></text></g><g><title>advent2021`hashbrown::map::make_hash (163 samples, 2.45%)</title><rect x="90.0482%" y="213" width="2.4541%" height="15" fill="rgb(250,191,14)" fg:x="5981" fg:w="163"/><text x="90.2982%" y="223.50">ad..</text></g><g><title>advent2021`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (92 samples, 1.39%)</title><rect x="91.1171%" y="197" width="1.3851%" height="15" fill="rgb(239,60,40)" fg:x="6052" fg:w="92"/><text x="91.3671%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="92.5023%" y="213" width="0.0151%" height="15" fill="rgb(206,27,48)" fg:x="6144" fg:w="1"/><text x="92.7523%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="92.5023%" y="197" width="0.0151%" height="15" fill="rgb(225,35,8)" fg:x="6144" fg:w="1"/><text x="92.7523%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.02%)</title><rect x="92.5023%" y="181" width="0.0151%" height="15" fill="rgb(250,213,24)" fg:x="6144" fg:w="1"/><text x="92.7523%" y="191.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (426 samples, 6.41%)</title><rect x="86.1186%" y="261" width="6.4137%" height="15" fill="rgb(247,123,22)" fg:x="5720" fg:w="426"/><text x="86.3686%" y="271.50">advent20..</text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::insert (267 samples, 4.02%)</title><rect x="88.5125%" y="245" width="4.0199%" height="15" fill="rgb(231,138,38)" fg:x="5879" fg:w="267"/><text x="88.7625%" y="255.50">adve..</text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (226 samples, 3.40%)</title><rect x="89.1298%" y="229" width="3.4026%" height="15" fill="rgb(231,145,46)" fg:x="5920" fg:w="226"/><text x="89.3798%" y="239.50">adv..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="92.5173%" y="213" width="0.0151%" height="15" fill="rgb(251,118,11)" fg:x="6145" fg:w="1"/><text x="92.7673%" y="223.50"></text></g><g><title>advent2021`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.11%)</title><rect x="92.5324%" y="261" width="0.1054%" height="15" fill="rgb(217,147,25)" fg:x="6146" fg:w="7"/><text x="92.7824%" y="271.50"></text></g><g><title>advent2021`std::io::stdio::_print (1 samples, 0.02%)</title><rect x="92.6378%" y="261" width="0.0151%" height="15" fill="rgb(247,81,37)" fg:x="6153" fg:w="1"/><text x="92.8878%" y="271.50"></text></g><g><title>advent2021`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="92.6378%" y="245" width="0.0151%" height="15" fill="rgb(209,12,38)" fg:x="6153" fg:w="1"/><text x="92.8878%" y="255.50"></text></g><g><title>advent2021`core::fmt::write (1 samples, 0.02%)</title><rect x="92.6378%" y="229" width="0.0151%" height="15" fill="rgb(227,1,9)" fg:x="6153" fg:w="1"/><text x="92.8878%" y="239.50"></text></g><g><title>advent2021`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="92.6378%" y="213" width="0.0151%" height="15" fill="rgb(248,47,43)" fg:x="6153" fg:w="1"/><text x="92.8878%" y="223.50"></text></g><g><title>advent2021`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="92.6378%" y="197" width="0.0151%" height="15" fill="rgb(221,10,30)" fg:x="6153" fg:w="1"/><text x="92.8878%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="92.6378%" y="181" width="0.0151%" height="15" fill="rgb(210,229,1)" fg:x="6153" fg:w="1"/><text x="92.8878%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="92.6528%" y="261" width="0.0301%" height="15" fill="rgb(222,148,37)" fg:x="6154" fg:w="2"/><text x="92.9028%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="93.3303%" y="245" width="0.0151%" height="15" fill="rgb(234,67,33)" fg:x="6199" fg:w="1"/><text x="93.5803%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.27%)</title><rect x="93.3454%" y="245" width="0.2710%" height="15" fill="rgb(247,98,35)" fg:x="6200" fg:w="18"/><text x="93.5954%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (112 samples, 1.69%)</title><rect x="92.6829%" y="261" width="1.6862%" height="15" fill="rgb(247,138,52)" fg:x="6156" fg:w="112"/><text x="92.9329%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (50 samples, 0.75%)</title><rect x="93.6164%" y="245" width="0.7528%" height="15" fill="rgb(213,79,30)" fg:x="6218" fg:w="50"/><text x="93.8664%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (45 samples, 0.68%)</title><rect x="93.6917%" y="229" width="0.6775%" height="15" fill="rgb(246,177,23)" fg:x="6223" fg:w="45"/><text x="93.9417%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="94.3692%" y="261" width="0.0151%" height="15" fill="rgb(230,62,27)" fg:x="6268" fg:w="1"/><text x="94.6192%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (8 samples, 0.12%)</title><rect x="95.9651%" y="245" width="0.1204%" height="15" fill="rgb(216,154,8)" fg:x="6374" fg:w="8"/><text x="96.2151%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 0.59%)</title><rect x="98.4041%" y="229" width="0.5872%" height="15" fill="rgb(244,35,45)" fg:x="6536" fg:w="39"/><text x="98.6541%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (317 samples, 4.77%)</title><rect x="94.3842%" y="261" width="4.7727%" height="15" fill="rgb(251,115,12)" fg:x="6269" fg:w="317"/><text x="94.6342%" y="271.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (204 samples, 3.07%)</title><rect x="96.0855%" y="245" width="3.0714%" height="15" fill="rgb(240,54,50)" fg:x="6382" fg:w="204"/><text x="96.3355%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.17%)</title><rect x="98.9913%" y="229" width="0.1656%" height="15" fill="rgb(233,84,52)" fg:x="6575" fg:w="11"/><text x="99.2413%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.14%)</title><rect x="99.1569%" y="261" width="0.1355%" height="15" fill="rgb(207,117,47)" fg:x="6586" fg:w="9"/><text x="99.4069%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.09%)</title><rect x="99.2924%" y="261" width="0.0903%" height="15" fill="rgb(249,43,39)" fg:x="6595" fg:w="6"/><text x="99.5424%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.05%)</title><rect x="99.3827%" y="261" width="0.0452%" height="15" fill="rgb(209,38,44)" fg:x="6601" fg:w="3"/><text x="99.6327%" y="271.50"></text></g><g><title>advent2021`advent2021::day19::combine_scanners (6,580 samples, 99.07%)</title><rect x="0.4216%" y="277" width="99.0665%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="6580"/><text x="0.6716%" y="287.50">advent2021`advent2021::day19::combine_scanners</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.06%)</title><rect x="99.4279%" y="261" width="0.0602%" height="15" fill="rgb(242,79,21)" fg:x="6604" fg:w="4"/><text x="99.6779%" y="271.50"></text></g><g><title>advent2021`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (9 samples, 0.14%)</title><rect x="99.4881%" y="277" width="0.1355%" height="15" fill="rgb(211,96,35)" fg:x="6608" fg:w="9"/><text x="99.7381%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.14%)</title><rect x="99.6236%" y="277" width="0.1355%" height="15" fill="rgb(253,215,40)" fg:x="6617" fg:w="9"/><text x="99.8736%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.08%)</title><rect x="99.7591%" y="277" width="0.0753%" height="15" fill="rgb(211,81,21)" fg:x="6626" fg:w="5"/><text x="100.0091%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.08%)</title><rect x="99.8344%" y="277" width="0.0753%" height="15" fill="rgb(208,190,38)" fg:x="6631" fg:w="5"/><text x="100.0844%" y="287.50"></text></g><g><title>all (6,642 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld`start (6,642 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>advent2021`main (6,642 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="383.50">advent2021`main</text></g><g><title>advent2021`std::rt::lang_start_internal (6,642 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="367.50">advent2021`std::rt::lang_start_internal</text></g><g><title>advent2021`std::rt::lang_start::_{{closure}} (6,642 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="351.50">advent2021`std::rt::lang_start::_{{closure}}</text></g><g><title>advent2021`std::sys_common::backtrace::__rust_begin_short_backtrace (6,642 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="335.50">advent2021`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>advent2021`advent2021::main (6,642 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="319.50">advent2021`advent2021::main</text></g><g><title>advent2021`advent2021::day19::part1 (6,642 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="6642"/><text x="0.2500%" y="303.50">advent2021`advent2021::day19::part1</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.09%)</title><rect x="99.9097%" y="277" width="0.0903%" height="15" fill="rgb(242,216,29)" fg:x="6636" fg:w="6"/><text x="100.1597%" y="287.50"></text></g></svg></svg>